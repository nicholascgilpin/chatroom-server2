// See README.txt for information and build instructions.
//
// Note: START and END tags are used in comments to define sections used in
// tutorials.  They are not part of the syntax for Protocol Buffers.
//
// To get an in-depth walkthrough of this file and the related examples, see:
// https://developers.google.com/protocol-buffers/docs/tutorials


// [START declaration]
syntax = "proto3";
package chatserver;
// [END declaration]

// [START messages]
message timeline {
  repeated Stats statuses = 1;
	string name = 2; // client, used for room name
	repeated string subscribed = 3;
}

message TimelineDB{
	repeated timeline timeline = 1; // Used to serialize all timelines
	int32 serverCounter = 2; // Highest number = latest message
}

message Stats {
	string name = 1;
	string msg = 2;
	int32 timeStamp = 3; // For requirements 10 & 11
}

message Commands {
	enum type {
		List = 0;
		Join = 1;
		Leave = 2;
		Chat = 3;
	}
	int32 commandType = 1;
	string roomName = 2; //For join & leave
}

message clientUser {
	string name = 1;
	repeated Stats log = 2; //All name's messages
	repeated clientUser subscription = 3;
}

message JoinRequest {
    string name = 1;
}

message Requests{
	string loginrequest = 1;
	string loginreply = 2;
	string joinrequest = 3;
	string joinreply = 4;
	string listreply = 5;
}

service commandService{

	rpc commandRequest(Commands) returns (Stats){}

	rpc Join(Requests) returns (Requests) {}

	rpc chat(stream Stats) returns (stream Stats){}

	rpc User(Requests) returns (Requests){}

	rpc List(Requests) returns (Requests) {}
}


// [END messages]
