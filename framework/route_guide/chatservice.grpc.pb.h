// Generated by the gRPC protobuf plugin.
// If you make any local change, they will be lost.
// source: chatservice.proto
// Original file comments:
// See README.txt for information and build instructions.
// 
// Note: START and END tags are used in comments to define sections used in
// tutorials.  They are not part of the syntax for Protocol Buffers.
// 
// To get an in-depth walkthrough of this file and the related examples, see:
// https://developers.google.com/protocol-buffers/docs/tutorials
//
// [START declaration]
#ifndef GRPC_chatservice_2eproto__INCLUDED
#define GRPC_chatservice_2eproto__INCLUDED

#include "chatservice.pb.h"

#include <grpc++/impl/codegen/async_stream.h>
#include <grpc++/impl/codegen/async_unary_call.h>
#include <grpc++/impl/codegen/proto_utils.h>
#include <grpc++/impl/codegen/rpc_method.h>
#include <grpc++/impl/codegen/service_type.h>
#include <grpc++/impl/codegen/status.h>
#include <grpc++/impl/codegen/stub_options.h>
#include <grpc++/impl/codegen/sync_stream.h>

namespace grpc {
class CompletionQueue;
class Channel;
class RpcService;
class ServerCompletionQueue;
class ServerContext;
}  // namespace grpc

namespace chatserver {

class commandService GRPC_FINAL {
 public:
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status commandRequest(::grpc::ClientContext* context, const ::chatserver::Commands& request, ::chatserver::Stats* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::chatserver::Stats>> AsynccommandRequest(::grpc::ClientContext* context, const ::chatserver::Commands& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::chatserver::Stats>>(AsynccommandRequestRaw(context, request, cq));
    }
    virtual ::grpc::Status Join(::grpc::ClientContext* context, const ::chatserver::JoinRequest& request, ::chatserver::Stats* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::chatserver::Stats>> AsyncJoin(::grpc::ClientContext* context, const ::chatserver::JoinRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::chatserver::Stats>>(AsyncJoinRaw(context, request, cq));
    }
    virtual ::grpc::Status chatStream(::grpc::ClientContext* context, const ::chatserver::ChatMsg& request, ::chatserver::Stats* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::chatserver::Stats>> AsyncchatStream(::grpc::ClientContext* context, const ::chatserver::ChatMsg& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::chatserver::Stats>>(AsyncchatStreamRaw(context, request, cq));
    }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::chatserver::Stats>* AsynccommandRequestRaw(::grpc::ClientContext* context, const ::chatserver::Commands& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::chatserver::Stats>* AsyncJoinRaw(::grpc::ClientContext* context, const ::chatserver::JoinRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::chatserver::Stats>* AsyncchatStreamRaw(::grpc::ClientContext* context, const ::chatserver::ChatMsg& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub GRPC_FINAL : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    ::grpc::Status commandRequest(::grpc::ClientContext* context, const ::chatserver::Commands& request, ::chatserver::Stats* response) GRPC_OVERRIDE;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::chatserver::Stats>> AsynccommandRequest(::grpc::ClientContext* context, const ::chatserver::Commands& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::chatserver::Stats>>(AsynccommandRequestRaw(context, request, cq));
    }
    ::grpc::Status Join(::grpc::ClientContext* context, const ::chatserver::JoinRequest& request, ::chatserver::Stats* response) GRPC_OVERRIDE;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::chatserver::Stats>> AsyncJoin(::grpc::ClientContext* context, const ::chatserver::JoinRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::chatserver::Stats>>(AsyncJoinRaw(context, request, cq));
    }
    ::grpc::Status chatStream(::grpc::ClientContext* context, const ::chatserver::ChatMsg& request, ::chatserver::Stats* response) GRPC_OVERRIDE;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::chatserver::Stats>> AsyncchatStream(::grpc::ClientContext* context, const ::chatserver::ChatMsg& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::chatserver::Stats>>(AsyncchatStreamRaw(context, request, cq));
    }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    ::grpc::ClientAsyncResponseReader< ::chatserver::Stats>* AsynccommandRequestRaw(::grpc::ClientContext* context, const ::chatserver::Commands& request, ::grpc::CompletionQueue* cq) GRPC_OVERRIDE;
    ::grpc::ClientAsyncResponseReader< ::chatserver::Stats>* AsyncJoinRaw(::grpc::ClientContext* context, const ::chatserver::JoinRequest& request, ::grpc::CompletionQueue* cq) GRPC_OVERRIDE;
    ::grpc::ClientAsyncResponseReader< ::chatserver::Stats>* AsyncchatStreamRaw(::grpc::ClientContext* context, const ::chatserver::ChatMsg& request, ::grpc::CompletionQueue* cq) GRPC_OVERRIDE;
    const ::grpc::RpcMethod rpcmethod_commandRequest_;
    const ::grpc::RpcMethod rpcmethod_Join_;
    const ::grpc::RpcMethod rpcmethod_chatStream_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status commandRequest(::grpc::ServerContext* context, const ::chatserver::Commands* request, ::chatserver::Stats* response);
    virtual ::grpc::Status Join(::grpc::ServerContext* context, const ::chatserver::JoinRequest* request, ::chatserver::Stats* response);
    virtual ::grpc::Status chatStream(::grpc::ServerContext* context, const ::chatserver::ChatMsg* request, ::chatserver::Stats* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_commandRequest : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_commandRequest() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_commandRequest() GRPC_OVERRIDE {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status commandRequest(::grpc::ServerContext* context, const ::chatserver::Commands* request, ::chatserver::Stats* response) GRPC_FINAL GRPC_OVERRIDE {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestcommandRequest(::grpc::ServerContext* context, ::chatserver::Commands* request, ::grpc::ServerAsyncResponseWriter< ::chatserver::Stats>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Join : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_Join() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_Join() GRPC_OVERRIDE {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Join(::grpc::ServerContext* context, const ::chatserver::JoinRequest* request, ::chatserver::Stats* response) GRPC_FINAL GRPC_OVERRIDE {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestJoin(::grpc::ServerContext* context, ::chatserver::JoinRequest* request, ::grpc::ServerAsyncResponseWriter< ::chatserver::Stats>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_chatStream : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_chatStream() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_chatStream() GRPC_OVERRIDE {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status chatStream(::grpc::ServerContext* context, const ::chatserver::ChatMsg* request, ::chatserver::Stats* response) GRPC_FINAL GRPC_OVERRIDE {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestchatStream(::grpc::ServerContext* context, ::chatserver::ChatMsg* request, ::grpc::ServerAsyncResponseWriter< ::chatserver::Stats>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_commandRequest<WithAsyncMethod_Join<WithAsyncMethod_chatStream<Service > > > AsyncService;
  template <class BaseClass>
  class WithGenericMethod_commandRequest : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_commandRequest() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_commandRequest() GRPC_OVERRIDE {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status commandRequest(::grpc::ServerContext* context, const ::chatserver::Commands* request, ::chatserver::Stats* response) GRPC_FINAL GRPC_OVERRIDE {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Join : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_Join() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_Join() GRPC_OVERRIDE {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Join(::grpc::ServerContext* context, const ::chatserver::JoinRequest* request, ::chatserver::Stats* response) GRPC_FINAL GRPC_OVERRIDE {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_chatStream : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_chatStream() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_chatStream() GRPC_OVERRIDE {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status chatStream(::grpc::ServerContext* context, const ::chatserver::ChatMsg* request, ::chatserver::Stats* response) GRPC_FINAL GRPC_OVERRIDE {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
};

}  // namespace chatserver


#endif  // GRPC_chatservice_2eproto__INCLUDED
